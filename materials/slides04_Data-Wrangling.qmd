---
# title: "Data Science for the Financial Analyst"
format: 
  revealjs:
    # theme: "theme/quarto_theme.scss"
    logo: "https://cryptologos.cc/logos/cardano-ada-logo.svg?v=023"
    height: 1080
    width: 1920
    incremental: false
    footer: "[Return to website](../lectures/01_Introduction.html)"
# title-slide-attributes:
  # data-background-size: contain
  # data-background-image: "images/btc_candles.jpg"
  # data-background-color: "#0A2C59"
editor_options: 
  
  chunk_output_type: console
execute: 
  eval: false
  echo: true
---

#  {background-image="../img/wallpaper/bbg_test6.jpeg" background-color="#000000"}

<h1 class="title_h1">

Data <br /> Wrangling

</h1>

![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/dplyr.png){.absolute top="25" left="650" width="200"}

# The Data Science Workflow

imagen sin highlight

# The Data Science Workflow

imagen con highlight

# Data Wrangling with the `{tidyverse}`

# R Packages for Data Science

The Tidyverse is an opinionated collection of R packages designed for data science.

All packages share an underlying design philosophy. grammar, and data structures.

# Data Wrangling <br> The Setup

# Example Data: `FANG`

-   A dataset containing the daily historical stock prices for the "FANG" tech stocks, "FB", "AMZN", "NFLX", and "GOOG", spanning from the beginning of 2013 through the end of 2016.

-   4K rows (observations) and 8 columns (variables).

-   Data source: [Yahoo Finance API](https://finance.yahoo.com/)

-   Available as a data set in the `{tidyquant}` package. install.packages("tidyquant"), library(tidyquant)

-   See also ?tidyquant::FANG

# Example Data: `FANG`

```{r}
# install.packages("tidyquant")
library(tidyverse)
library(tidyquant)
```

```{r}
tibble::glimpse(FANG)
head(FANG)
```

# 

Stock performance chart

# Advantages of the `{dplyr} package`

-   Contains a set of convenient functions to perform common transformation and summary operations on tabular data.

-   Compared to Base R functions:

    -   Syntax is more consistent

    -   Output is more consistent (tibbles)

    -   Can also work with databases.

# The main verbs (functions) of the {dplyr} package.

-   `filter()` : Pick rows with matching criteria

-   `select()` : Pick columns with matching criteria

-   `arrange()` : Reorder rows

-   `mutate()` : Create new variables

-   `summarize()` or summarise() : Sum up variables

-   `group_by()` : Create subsets

-   `distinct()` : Removes duplicates from a subset of columns

# Consistent Syntax of {dplyr}

All functions take the same main arguments:

<insertar imagen de lo siguiente> verb(data, condition)

The first argument is your data, subsequent arguments say what to do with the data. These arguments depend on the "verb" (function) you are using.

# Loading {dplyr}

```{r}
library(dplyr)
```

# filter() - pick rows with matching criteria -

(create cool slide for this one)

# Pick Rows with Matching Criteria

filter(data, conditon) allows you to keep rows based on the values of the columns:

```{r}
# FANG = FB, AMZN, NFLX, GOOG
fang_data <- FANG

filter(fang_data, symbol == "AMZN", close > 300)
```

## Equivalent code in base R

```{r}
fang_data[fang_data$symbol == "AMZN" & fang_data$close > 300, ]
```

# Pick Rows with Matching Criteria

filter(data, conditon) allows you to keep rows based on the values of the columns:

- join filtering conditions with `&` (and) and `|` (or):

```{r}
filter(fang_data, symbol == "AMZN" | symbol == "GOOG")
```

# Pick Rows with Matching Criteria

filter(data, conditon) allows you to keep rows based on the values of the columns:

- You can also combine conditions with `&` or `,` to indicate "and" (check for both conditions) or with `|` to indicate "or" (check for either condition):

```{r}
# filter for either AMZN or GOOG, but filter rows where close is greater than 840
filter(fang_data, (symbol == "AMZN" | symbol == "GOOG"), close > 840)
```

- There's a useful shortcut when you're combining `|` and `==` : `%in%`. It keeps rows where the variable equals one of the values on the right. For example, if we would like to filter the data for `AMZN` and `GOOG`, we can write:

```{r}
filter(fang_data, symbol %in% c("AMZN", "GOOG"))
```

# Pick Rows with Matching Criteria

filter(data, conditon) allows you to select a subset of rows:

- filter conditions out with `!=` (not equal)

```{r}
filter(fang_data, symbol != "FB", symbol != "AMZN")
```

- The `%in%` operator is very useful for

# Pick Rows with Matching Criteria

filter(data, condition) allows you to select a subset of rows:

- reverse filter conditions with `!`:

```{r}
# Remove data from FB
filter(fang_data, !symbol == "FB")
```

- Here the `%in%` operator is also very useful, when you want to negate several conditions:

```{r}
# Remove data from both FB and AMZN
filter(fang_data, !symbol %in% c("FB", "AMZN"))


# Equivalent to:
filter(fang_data, !symbol == "FB", !symbol == "AMZN")
```

# Your Turn!

Do the following two exercises.

1.  Filter the data for NFLX, AMZN, and FB. Can you think of another way of doing it?

2.  Filter the rows where NFLX stock had a closing price between 105 and 110.

# Solutions: Exercise 1

```{r}
filter(fang_data, symbol %in% c("NFLX", "AMZN", "FB"))
```

Equivalent to:

```{r}
filter(fang_data, symbol == "NFLX" | symbol == "AMZN" | symbol == "FB")
```

Bonus:

```{r}
filter(fang_data, symbol != "GOOG")
```

# Solutions: Exercise 2

```{r}
filter(fang_data, symbol == "NFLX", close >= 105, close <= 110)
```

# select() - pick columns based on their name -

(create cool slide for this one)

# Pick Columns with Matching Criteria

`select(data, condition)` allows you to select a subset of columns.

Alternatively, you can use `select(data, column names)`:

```{r}
select(fang_data, symbol, date, close)
```

# Pick Columns with Matching Criteria

`select(data, condition)` allows you to select a subset of columns.

Alternatively, you can use `select(data, column names)`:

```{r, echo=FALSE}
select(fang_data, symbol, date, close)
```

Equivalent code in base R: <highlighteado>

```{r}
fang_data[, c("symbol", "date", "close")]
```

# Pick Columns with Matching Criteria

You can also exclude certain columns by using the `!` prefix. Historically this operation was done with `-` instead of `!`, so you’re likely to see that in the wild. These two operators serve the same purpose but with subtle differences in behavior. We recommend using `!` because it reads as “not” and combines well with `&` and `|`.

```{r}
select(fang_data, !low, !high, !volume)
```

# Pick Columns with Matching Criteria

`select(data, condition)` can also be used to **reorder columns**:

```{r}
select(fang_data, date, symbol, close)
```

# Pick Columns with Matching Criteria

You can also use the `:` notation to select all columns between two other columns (inclusive).

```{r}
select(fang_data, symbol:open)
```

# Advanced Selection with Helper Functions

Select all columns that are characters:

```{r}
fang_data |> 
  select(where(is.character))
```

There are a number of helper functions you can use within `select()`:

`starts_with("abc")`: matches names that begin with “abc”.

`ends_with("xyz")`: matches names that end with “xyz”.

`contains("ijk")`: matches names that contain “ijk”.

`num_range("x", 1:3)`: matches x1, x2 and x3.

`everything()` is straightforward: it selects every column that has not been specified previously in `select()`. It's very useful for reordering some columns while maintaining all other columns:

```{r}
select(fang_data, date, symbol, everything())
```

# Your Turn!

Do the following two exercises.

1.  Select all columns in `fang_data` except for the `adjusted` column. Try to do it in two different ways.

2.  Select all columns that end with an `e`.

# Solutions: Exercise 1

```{r}
select(fang_data, !adjusted)
```

Equivalent to:

```{r}
select(fang_data, symbol:volume)
```

Bonus:

```{r}
select(fang_data, !starts_with("adj"))
```

# Solutions: Exercise 2

```{r}
select(fang_data, ends_with("e"))
```

# arrange() - reorder rows -

(create cool slide for this one) slide 00292

# Reorder Rows

`arrange(data, condition)` allows you to order rows by variables. 

By default, it `arrange()` orders the columns in **ascending** order.

```{r}
arrange(fang_data, close)
```


# Reorder Rows

`arrange(data, condition)` allows you to order rows by variables. By default, it `arrange()` orders the columns in **ascending** order.

```{r, echo=FALSE}
arrange(fang_data, close)
```

Equivalent to base R:
```{r}
fang_data[order(fang_data$close), ]
```


# Reorder Rows

`arrange(data, condition)` allows you to order rows by variables. 

By default, it `arrange()` orders the columns in **ascending** order. You can reverse the order (**descending**) using the **prefix `-` with the column name**:

```{r}
arrange(fang_data, -close)
```

**This only works for numeric columns!**


# Reorder Rows

`arrange(data, condition)` allows you to order rows by variables. 

Alternatively, you can use the `desc()` function:

```{r}
arrange(fang_data, desc(close))
```


# Reorder Rows

`arrange(data, condition)` allows you to order rows by variables. 

You can order by more than one column (the first column takes precedence, and so on):

```{r}
arrange(fang_data, desc(date), volume)
```


# Your Turn!

Complete the following two exercises.

1.  In the `fang_data` tibble, order all rows so that you have the dates from most recent to oldest and the tickers are sorted alphabetically.

2. Sort the `fang_data` tibble so that you get, for each date, the closing prices in descending order. Dates should be sorted by oldest to most recent.

# Solutions: Exercise 1

```{r}
arrange(fang_data, desc(date), symbol)
```


# Solutions: Exercise 2

```{r}
arrange(fang_data, date, desc(close))
```

Bonus:

```{r}
arrange(fang_data, date, -close) # as 'close' is numeric
```


# mutate() - Create new variable -

(create cool slide for this one) slide 00298
