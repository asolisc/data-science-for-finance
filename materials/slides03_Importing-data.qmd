---
# title: "Data Science for the Financial Analyst"
format: 
  revealjs:
    # theme: "theme/quarto_theme.scss"
    logo: "https://cryptologos.cc/logos/cardano-ada-logo.svg?v=023"
    height: 1080
    width: 1920
    incremental: false
    footer: "[Return to website](../lectures/01_Introduction.html)"
# title-slide-attributes:
  # data-background-size: contain
  # data-background-image: "images/btc_candles.jpg"
  # data-background-color: "#0A2C59"
editor_options: 
  chunk_output_type: console
  
execute: 
  eval: false
  echo: true
---

#  {background-image="../img/wallpaper/bbg_test6.jpeg" background-color="#000000"}

<h1 class="title_h1">

Importing <br /> Data

</h1>

![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/readr.png){.absolute top="25" left="650" width="200"}

# The Data Science Workflow

imagen sin highlight


# The Data Science Workflow

imagen con highlight


# Data Import 
Usually, you create data frames by loading data files such as .txt, .csv, .xlsx, and much more.

```{r}
my_data <- read_excel("path/here")
```

```{r}
my_data <- read_csv("path_to_csv_here")
```

The ./ refers to a relative path, starting at your working directory (wd).
You can check your "wd" by running `getwd()` in your R console.

You can even import data from a web resource by passing a valid URL that points to a file. In the example below, we read a .csv but we provide a URL instead of a "path":

```{r}
my_data <- read_csv("URL_path")
```


# Data Import: Tibbles

The `{readr}` package provides a fast and friendly way to read rectangular data which are stored as tibbles:

```{r}
my_data <- readr::read_delim("path_to_file", delim = "|")
```

The following commands are equivalent: both read a comma-separated-values (csv) file.

```{r}
my_data <- readr::read_delim("path_to_file", delim = ",")
```

```{r}
my_data <- read_csv("path_to_csv_here")
```

If you encounter a file separated by semicolon (;), you can use a variant of the `read_csv()` function called `read_csv2()`:

```{r}
my_data <- read_csv2("path_to_semicolon_sep_val_file")
```

Which would be equivalent to:

```{r}
my_data <- readr::read_delim("path_to_file", delim = ";")
```

# Data Import: Excel Files (insertar emoji de gafas de sol)

The `{readr}` package provides functionality to import Excel sheets.

```{r}
my_data <- readxl::read_excel("path_to_Excel_file")
```

By default, the `read_excel()` function reads the first sheet of the Excel file, but you can read other sheets by using the `sheet` argument.

```{r}
my_data <- readxl::read_excel("path_to_Excel_file", sheet = 2)
```


# Data Import: Using R packages

```{r}
library(yfR)
```

The following code, downloads the daily OHLCV data and returns for the S&P 500 index starting from January 1st, 1950.

```{r}
# set options for algorithm
my_ticker <- '^GSPC'
first_date <- "1950-01-01"
last_date <- today()

# fetch data
df_yf <- yf_get(tickers = my_ticker, 
                first_date = first_date,
                last_date = last_date)
```



# Your Turn!

Do the following four exercises.

1. Import data from any of the Excel files located within the "data/xl/" folder (directory).

2. From the file "data/xl/daily.xlsx", import the data on the second sheet.

3. Import data from any of the .csv files located within the "data/csv/" folder (directory).

4. Import data for NASDAQ 100 index using yfR starting from January 1st, 2020 (Hint: look for the appropriate ticker by searching in the Yahoo Finance website).
